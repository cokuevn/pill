// AI Assistant —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
// –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É

import database from './database.js';

class AIAssistant {
  constructor() {
    this.supportMessages = [
      "Remember, taking care of your health is an act of self-love! üíô",
      "Every day you take your medications on time is a small victory! üèÜ",
      "You're doing great! Keep up the excellent work! üí™",
      "Healthy habits are built day by day. You're on the right path! üåü",
      "Your discipline in taking medications is inspiring! Keep it up! ‚ú®"
    ];
    
    this.motivationalMessages = [
      "Today is a new day - new opportunities to take care of yourself! üåÖ",
      "You've already taken an important step by adding medications to the app. Now just take them! üì±",
      "Small steps every day lead to big results! üë£",
      "Your health is your wealth. Invest in it every day! üíé",
      "Remember: you're not alone on this journey to health! ü§ù"
    ];
  }

  // –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  async createUserContext(pills = []) {
    try {
      const stats = await database.getMedicationStats(30);
      const patterns = await database.getMedicationPatterns();
      const insights = await database.getRecentInsights(7);
      const consecutiveDays = await database.getConsecutiveDays();
      
      const context = {
        // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        totalMedications: pills.length,
        currentTime: new Date().toLocaleTimeString(),
        currentDate: new Date().toDateString(),
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–µ–º–∞
        adherenceRate: stats?.adherenceRate || 0,
        totalTaken: stats?.totalTaken || 0,
        missedDoses: stats?.missedDoses || 0,
        consecutiveDays: consecutiveDays,
        
        // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è
        preferredTimeSlot: this.getPreferredTimeSlot(patterns.timeOfDay || {}),
        mostActiveDay: this.getMostActiveDay(patterns.dayOfWeek || {}),
        hasTimingIssues: (patterns.delays || []).length > 2,
        
        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –ø—Ä–æ–±–ª–µ–º—ã
        recentAchievements: insights.achievements || [],
        currentConcerns: insights.concerns || [],
        suggestions: insights.suggestions || [],
        
        // –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        needsEncouragement: stats?.adherenceRate < 70,
        needsMotivation: consecutiveDays === 0,
        celebrateSuccess: stats?.adherenceRate >= 90 || consecutiveDays > 7,
        
        // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º
        pillStats: stats?.pillStats || [],
        
        // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        frequentDelays: (patterns.delays || []).length,
        timeConsistency: this.calculateTimeConsistency(patterns.delays || [])
      };
      
      return context;
    } catch (error) {
      console.error('Error creating user context:', error);
      return this.getDefaultContext(pills);
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è
  getPreferredTimeSlot(timeOfDay) {
    const slots = Object.entries(timeOfDay);
    if (slots.length === 0) return 'Morning';
    
    return slots.reduce((max, current) => 
      current[1] > max[1] ? current : max
    )[0];
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è
  getMostActiveDay(dayOfWeek) {
    const days = Object.entries(dayOfWeek);
    if (days.length === 0) return 'Monday';
    
    return days.reduce((max, current) => 
      current[1] > max[1] ? current : max
    )[0];
  }
  
  // –†–∞—Å—á–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞
  calculateTimeConsistency(delays) {
    if (delays.length === 0) return 100;
    
    const onTimeCount = delays.filter(delay => Math.abs(delay.delayMinutes) <= 15).length;
    return Math.round((onTimeCount / delays.length) * 100);
  }
  
  // –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  getDefaultContext(pills) {
    return {
      totalMedications: pills.length,
      currentTime: new Date().toLocaleTimeString(),
      currentDate: new Date().toDateString(),
      adherenceRate: 100,
      isNewUser: true,
      needsGuidance: pills.length === 0
    };
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  async generatePersonalizedRecommendations(userContext) {
    const recommendations = [];
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if (userContext.adherenceRate < 80) {
      recommendations.push({
        type: 'improvement',
        priority: 'high',
        title: '–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤',
        message: `–í–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–æ–±–ª—é–¥–µ–Ω–∏—è: ${userContext.adherenceRate}%. –†–µ–∫–æ–º–µ–Ω–¥—É—é —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –≤ –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.`,
        action: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'
      });
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    if (userContext.hasTimingIssues) {
      recommendations.push({
        type: 'timing',
        priority: 'medium',
        title: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è',
        message: `–ó–∞–º–µ—á–∞—é —á–∞—Å—Ç—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ –ø—Ä–∏–µ–º–µ. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤? –í–∞—à —Å–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥: ${userContext.preferredTimeSlot}`,
        action: '–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'
      });
    }
    
    // –ü–æ–æ—â—Ä–µ–Ω–∏—è –∑–∞ —É—Å–ø–µ—Ö–∏
    if (userContext.celebrateSuccess) {
      recommendations.push({
        type: 'celebration',
        priority: 'positive',
        title: '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ',
        message: userContext.consecutiveDays > 7 
          ? `–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –í—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ ${userContext.consecutiveDays} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥!`
          : `–û—Ç–ª–∏—á–Ω–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞! –£—Ä–æ–≤–µ–Ω—å —Å–æ–±–ª—é–¥–µ–Ω–∏—è: ${userContext.adherenceRate}%`,
        action: '–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ'
      });
    }
    
    // –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (userContext.needsMotivation) {
      recommendations.push({
        type: 'motivation',
        priority: 'high',
        title: '–ú–æ—Ç–∏–≤–∞—Ü–∏—è',
        message: this.getRandomMessage(this.motivationalMessages),
        action: '–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–µ–Ω—å'
      });
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (userContext.isNewUser && userContext.needsGuidance) {
      recommendations.push({
        type: 'guidance',
        priority: 'high',
        title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
        message: '–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–µ–º–∞.',
        action: '–î–æ–±–∞–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ'
      });
    }
    
    return recommendations;
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async generateProactiveInsights(userContext) {
    const insights = [];
    
    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤
    if (userContext.missedDoses > 3) {
      insights.push({
        type: 'concern',
        urgency: 'medium',
        message: `–ó–∞–º–µ—á–∞—é, —á—Ç–æ –≤—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ ${userContext.missedDoses} –¥–æ–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è. –•–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ç–æ–º, —á—Ç–æ –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç –ø—Ä–∏–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤?`,
        suggestion: '–î–∞–≤–∞–π—Ç–µ –Ω–∞–π–¥–µ–º —Ä–µ—à–µ–Ω–∏–µ –≤–º–µ—Å—Ç–µ',
        emotionalSupport: true
      });
    }
    
    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –Ω–∏–∑–∫–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ
    if (userContext.adherenceRate < 60) {
      insights.push({
        type: 'support',
        urgency: 'high',
        message: '–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ –∏–Ω–æ–≥–¥–∞ –±—ã–≤–∞–µ—Ç —Å–ª–æ–∂–Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞—Ö. –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ! –ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å - —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.',
        suggestion: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≤—è–∑–∞—Ç—å –ø—Ä–∏–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤ —Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–æ–π',
        emotionalSupport: true,
        motivational: this.getRandomMessage(this.supportMessages)
      });
    }
    
    // –ü–æ–æ—â—Ä–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    if (userContext.consecutiveDays >= 3 && userContext.consecutiveDays <= 7) {
      insights.push({
        type: 'encouragement',
        urgency: 'positive',
        message: `–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! ${userContext.consecutiveDays} –¥–Ω—è –ø–æ–¥—Ä—è–¥ - —ç—Ç–æ –æ—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ –ø—Ä–∏–≤—ã—á–∫–∏! üåü`,
        suggestion: '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ, –∏ —Å–∫–æ—Ä–æ —ç—Ç–æ —Å—Ç–∞–Ω–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º',
        emotionalSupport: true
      });
    }
    
    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö
    if (userContext.mostActiveDay === 'Fri' && userContext.timeConsistency < 70) {
      insights.push({
        type: 'pattern',
        urgency: 'medium',
        message: '–ó–∞–º–µ—á–∞—é, —á—Ç–æ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ –ø—Ä–∏–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –º–µ–Ω–µ–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º. –≠—Ç–æ –¥–æ–≤–æ–ª—å–Ω–æ –æ–±—ã—á–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è!',
        suggestion: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ',
        emotionalSupport: false
      });
    }
    
    return insights;
  }
  
  // –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
  async providePsychologicalSupport(userContext, userMessage = '') {
    const support = {
      empathy: '',
      encouragement: '',
      practical: '',
      motivation: ''
    };
    
    // –≠–º–ø–∞—Ç–∏—è
    if (userContext.needsEncouragement) {
      support.empathy = "–Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –∏–Ω–æ–≥–¥–∞ –±—ã–≤–∞–µ—Ç —Ç—Ä—É–¥–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤. –í—ã –Ω–µ –æ–¥–∏–Ω–æ–∫–∏ –≤ —ç—Ç–æ–º, –∏ –≤–∞—à–∏ —É—Å–∏–ª–∏—è –∏–º–µ—é—Ç –∑–Ω–∞—á–µ–Ω–∏–µ.";
    }
    
    // –ü–æ–æ—â—Ä–µ–Ω–∏–µ
    if (userContext.adherenceRate > 0) {
      support.encouragement = `–í—ã —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç–µ –∑–∞–±–æ—Ç—É –æ —Å–≤–æ–µ–º –∑–¥–æ—Ä–æ–≤—å–µ - —ç—Ç–æ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –ö–∞–∂–¥—ã–π –ø—Ä–∏–Ω—è—Ç—ã–π –≤–æ–≤—Ä–µ–º—è –ø—Ä–µ–ø–∞—Ä–∞—Ç - —ç—Ç–æ —à–∞–≥ –∫ –ª—É—á—à–µ–º—É —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—é.`;
    }
    
    // –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
    if (userContext.hasTimingIssues) {
      support.practical = "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≤—è–∑–∞—Ç—å –ø—Ä–∏–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤ —Å –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏: —É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ—Ñ–µ, —á–∏—Å—Ç–∫–∞ –∑—É–±–æ–≤ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤–æ—Å—Ç–µ–π. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å —É—Å—Ç–æ–π—á–∏–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É.";
    }
    
    // –ú–æ—Ç–∏–≤–∞—Ü–∏—è
    if (userContext.consecutiveDays > 0) {
      support.motivation = `–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç ${userContext.consecutiveDays} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Å–∏–ª–∞ –≤–æ–ª–∏! –≠—Ç–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç!`;
    } else {
      support.motivation = this.getRandomMessage(this.motivationalMessages);
    }
    
    return support;
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  getRandomMessage(messages) {
    return messages[Math.floor(Math.random() * messages.length)];
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ò–ò –æ—Ç–≤–µ—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
  async createContextualResponse(userMessage, messageType, pills) {
    try {
      const userContext = await this.createUserContext(pills);
      const recommendations = await this.generatePersonalizedRecommendations(userContext);
      const insights = await this.generateProactiveInsights(userContext);
      const support = await this.providePsychologicalSupport(userContext, userMessage);
      
      return {
        userContext,
        recommendations,
        insights,
        support,
        hasPersonalData: userContext.totalMedications > 0,
        needsMotivation: userContext.needsMotivation,
        shouldCelebrate: userContext.celebrateSuccess
      };
    } catch (error) {
      console.error('Error creating contextual response:', error);
      return null;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
const aiAssistant = new AIAssistant();
export default aiAssistant;